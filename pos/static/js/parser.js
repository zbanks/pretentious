parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "amount": parse_amount,
        "command": parse_command,
        "credit": parse_credit,
        "selection": parse_selection,
        "start": parse_start,
        "transfer": parse_transfer,
        "username": parse_username,
        "wsp": parse_wsp
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_wsp();
        if (result3 !== null) {
          var result4 = parse_command();
          if (result4 !== null) {
            var result5 = parse_wsp();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(command, endwsp) { command["onNext"] = endwsp != ""; return command; })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_command() {
        var cacheKey = 'command@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result22 = parse_username();
        if (result22 !== null) {
          var result23 = parse_wsp();
          if (result23 !== null) {
            var result24 = parse_selection();
            if (result24 !== null) {
              var result20 = [result22, result23, result24];
            } else {
              var result20 = null;
              pos = savedPos7;
            }
          } else {
            var result20 = null;
            pos = savedPos7;
          }
        } else {
          var result20 = null;
          pos = savedPos7;
        }
        var result21 = result20 !== null
          ? (function(user, sel) { return {"type" : "US", "username" : user, "selection" : sel }; })(result20[0], result20[2])
          : null;
        if (result21 !== null) {
          var result19 = result21;
        } else {
          var result19 = null;
          pos = savedPos6;
        }
        if (result19 !== null) {
          var result0 = result19;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result16 = parse_username();
          if (result16 !== null) {
            var result17 = parse_wsp();
            if (result17 !== null) {
              var result18 = parse_credit();
              if (result18 !== null) {
                var result14 = [result16, result17, result18];
              } else {
                var result14 = null;
                pos = savedPos5;
              }
            } else {
              var result14 = null;
              pos = savedPos5;
            }
          } else {
            var result14 = null;
            pos = savedPos5;
          }
          var result15 = result14 !== null
            ? (function(user, credit) { return {"type" : "UC", "username" : user, "credit": credit }; })(result14[0], result14[2])
            : null;
          if (result15 !== null) {
            var result13 = result15;
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result10 = parse_username();
            if (result10 !== null) {
              var result11 = parse_wsp();
              if (result11 !== null) {
                var result12 = parse_transfer();
                if (result12 !== null) {
                  var result8 = [result10, result11, result12];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
            var result9 = result8 !== null
              ? (function(user, trans) { return {"type" : "UT", "username" : user, "transfer" : trans }; })(result8[0], result8[2])
              : null;
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos1 = pos;
              var result5 = parse_username();
              var result6 = result5 !== null
                ? (function(user) { return {"type": "U", "username" : user }; })(result5)
                : null;
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                var result2 = parse_wsp();
                var result3 = result2 !== null
                  ? (function() { return {"type" : "" }; })()
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_username() {
        var cacheKey = 'username@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z0-9_\-]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_\\-]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z0-9_\-]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_\\-]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(name) { return name.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_credit() {
        var cacheKey = 'credit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 6) === "credit") {
          var result18 = "credit";
          pos += 6;
        } else {
          var result18 = null;
          if (reportMatchFailures) {
            matchFailed("\"credit\"");
          }
        }
        if (result18 !== null) {
          var result14 = result18;
        } else {
          if (input.substr(pos, 1) === "0") {
            var result17 = "0";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          if (result17 !== null) {
            var result14 = result17;
          } else {
            var result14 = null;;
          };
        }
        if (result14 !== null) {
          var result15 = parse_wsp();
          if (result15 !== null) {
            var result16 = parse_amount();
            if (result16 !== null) {
              var result12 = [result14, result15, result16];
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result13 = result12 !== null
          ? (function(amt) { return amt; })(result12[2])
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 6) === "credit") {
            var result10 = "credit";
            pos += 6;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"credit\"");
            }
          }
          if (result10 !== null) {
            var result2 = result10;
          } else {
            if (input.substr(pos, 5) === "credi") {
              var result9 = "credi";
              pos += 5;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"credi\"");
              }
            }
            if (result9 !== null) {
              var result2 = result9;
            } else {
              if (input.substr(pos, 4) === "cred") {
                var result8 = "cred";
                pos += 4;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"cred\"");
                }
              }
              if (result8 !== null) {
                var result2 = result8;
              } else {
                if (input.substr(pos, 3) === "cre") {
                  var result7 = "cre";
                  pos += 3;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"cre\"");
                  }
                }
                if (result7 !== null) {
                  var result2 = result7;
                } else {
                  if (input.substr(pos, 2) === "cr") {
                    var result6 = "cr";
                    pos += 2;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"cr\"");
                    }
                  }
                  if (result6 !== null) {
                    var result2 = result6;
                  } else {
                    if (input.substr(pos, 1) === "c") {
                      var result5 = "c";
                      pos += 1;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"c\"");
                      }
                    }
                    if (result5 !== null) {
                      var result2 = result5;
                    } else {
                      if (input.substr(pos, 1) === "0") {
                        var result4 = "0";
                        pos += 1;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"0\"");
                        }
                      }
                      if (result4 !== null) {
                        var result2 = result4;
                      } else {
                        var result2 = null;;
                      };
                    };
                  };
                };
              };
            };
          }
          var result3 = result2 !== null
            ? (function() { return 0; })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_amount() {
        var cacheKey = 'amount@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9.]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9.]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9.]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9.]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(num) { return parseFloat(num.join(""), 10); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_transfer() {
        var cacheKey = 'transfer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        if (input.substr(pos, 1) === ">") {
          var result13 = ">";
          pos += 1;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\">\"");
          }
        }
        if (result13 !== null) {
          var result14 = parse_wsp();
          if (result14 !== null) {
            var result15 = parse_username();
            if (result15 !== null) {
              var result16 = parse_wsp();
              if (result16 !== null) {
                var result17 = parse_amount();
                if (result17 !== null) {
                  var result11 = [result13, result14, result15, result16, result17];
                } else {
                  var result11 = null;
                  pos = savedPos4;
                }
              } else {
                var result11 = null;
                pos = savedPos4;
              }
            } else {
              var result11 = null;
              pos = savedPos4;
            }
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        var result12 = result11 !== null
          ? (function(user, amt) { return {"type": ">UA", "username": user, "amount" : amt}; })(result11[2], result11[4])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ">") {
            var result7 = ">";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\">\"");
            }
          }
          if (result7 !== null) {
            var result8 = parse_wsp();
            if (result8 !== null) {
              var result9 = parse_username();
              if (result9 !== null) {
                var result5 = [result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(user) { return {"type": ">U", "username" : user }; })(result5[2])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === ">") {
              var result2 = ">";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            var result3 = result2 !== null
              ? (function() { return {"type": ">" }; })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selection() {
        var cacheKey = 'selection@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[1-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[1-9]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(num) { return parseInt(num.join(""), 10); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_wsp() {
        var cacheKey = 'wsp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ 	\r\n]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	\\r\\n]");
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
